cat("Mean Gross Margin Percentage:", mean_margin, "\n")
# 16. Gross income
# Mean and total gross income
mean_income <- mean(data$gross.income)
total_income <- sum(data$gross.income)
cat("Mean Gross Income:", mean_income, "\n")
cat("Total Gross Income:", total_income, "\n")
# 17. Rating
# Mean and distribution of customer ratings
mean_rating <- mean(data$Rating)
cat("Mean Customer Rating:", mean_rating, "\n")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('E:/College/Level4/Semester_7/Information Visualization/Labs/lab 8/code.R')
runApp('E:/College/Level4/Semester_7/Information Visualization/Labs/lab 8/code.R')
runApp('E:/College/Level4/Semester_7/Information Visualization/Labs/lab 8/code.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('E:/College/Level4/Semester_7/Information Visualization/Labs/lab 8/code.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('E:/College/Level4/Semester_7/Information Visualization/Labs/lab 8/code.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
# 1. Descriptive Statistics
# Count of unique invoices
invoice_count <- length(unique(data$Invoice.ID))
data <- read.csv("supermarket_sales - Sheet1.csv")
# ==========================[1] DATA PREPROCESSING:=====================================
# Check if there are any duplicated rows
anyDuplicated(data)
# extract column month from the Date column
data$Month <- format(as.Date(data$Date, format = "%m/%d/%y"), "%b")
# Drop specified columns
data <- data %>%
select(-Invoice.ID, -Time, -cogs, -gross.margin.percentage)
# View unique values in 'Branch' and 'Customer type'
unique_branch <- unique(data$Branch)
unique_customer_type <- unique(data$Customer.type)
unique_gender <- unique(data$Gender)
# Print unique values
cat("Unique values in 'Branch':", unique_branch, "\n")
cat("Unique values in 'Customer type':", unique_customer_type, "\n")
cat("Unique values in 'Gender':", unique_gender, "\n")
# Summary statistics for numeric columns
summary(data)
# check nulls
any(is.na(data))
# get columns info
str(data)
# Assuming your Date column is character
data$Date <- mdy(data$Date)
str(data$Date)
# Display the first few rows of the data
head(data)
# =========================== STATISTICS=================================================
# 1. Descriptive Statistics
# Count of unique invoices
invoice_count <- length(unique(data$Invoice.ID))
cat("Number of unique invoices:", invoice_count, "\n")
# 2. Branch
# Count of transactions for each branch
branch_counts <- table(data$Branch)
cat("Transactions per branch:\n", branch_counts, "\n")
# 3. City
# Count of transactions for each city
city_counts <- table(data$City)
cat("Transactions per city:\n", city_counts, "\n")
# 4. Customer type
# Count of customers by type
customer_type_counts <- table(data$Customer.type)
cat("Customer type distribution:\n", customer_type_counts, "\n")
# 5. Gender
# Count of customers by gender
gender_counts <- table(data$Gender)
cat("Gender distribution:\n", gender_counts, "\n")
# 6. Product line
# Count of products in each category
product_line_counts <- table(data$Product.line)
cat("Product line distribution:\n", product_line_counts, "\n")
# 7. Unit price
# Descriptive statistics for unit price
unit_price_stats <- summary(data$Unit.price)
cat("Unit price statistics:\n", unit_price_stats, "\n")
# 8. Quantity
# Descriptive statistics for quantity
quantity_stats <- summary(data$Quantity)
cat("Quantity statistics:\n", quantity_stats, "\n")
# 9. Tax
# Mean and total tax collected
mean_tax <- mean(data$Tax)
total_tax <- sum(data$Tax)
cat("Mean Tax:", mean_tax, "\n")
cat("Total Tax Collected:", total_tax, "\n")
# 10. Total
# Descriptive statistics for total
total_stats <- summary(data$Total)
cat("Total statistics:\n", total_stats, "\n")
# 11. Date
# Count of transactions over time
date_counts <- table(data$Date)
cat("Transactions over time:\n", date_counts, "\n")
# 12. Time
# Frequency distribution of purchase times
time_counts <- table(data$Time)
cat("Purchase time distribution:\n", time_counts, "\n")
# 13. Payment
# Count of transactions for each payment method
payment_counts <- table(data$Payment)
cat("Payment method distribution:\n", payment_counts, "\n")
# 14. COGS
# Mean and total COGS
mean_cogs <- mean(data$cogs)
total_cogs <- sum(data$cogs)
cat("Mean COGS:", mean_cogs, "\n")
cat("Total COGS:", total_cogs, "\n")
# 15. Gross margin percentage
# Mean and distribution of gross margin percentages
mean_margin <- mean(data$gross.margin.percentage)
cat("Mean Gross Margin Percentage:", mean_margin, "\n")
# 16. Gross income
# Mean and total gross income
mean_income <- mean(data$gross.income)
total_income <- sum(data$gross.income)
cat("Mean Gross Income:", mean_income, "\n")
cat("Total Gross Income:", total_income, "\n")
# 17. Rating
# Mean and distribution of customer ratings
mean_rating <- mean(data$Rating)
cat("Mean Customer Rating:", mean_rating, "\n")
data <- read.csv("supermarket_sales - Sheet1.csv")
# ==========================[1] DATA PREPROCESSING:=====================================
# Check if there are any duplicated rows
anyDuplicated(data)
# extract column month from the Date column
data$Month <- format(as.Date(data$Date, format = "%m/%d/%y"), "%b")
# Drop specified columns
data <- data %>%
select(-Invoice.ID, -Time, -cogs, -gross.margin.percentage)
# View unique values in 'Branch' and 'Customer type'
unique_branch <- unique(data$Branch)
unique_customer_type <- unique(data$Customer.type)
unique_gender <- unique(data$Gender)
# Print unique values
cat("Unique values in 'Branch':", unique_branch, "\n")
cat("Unique values in 'Customer type':", unique_customer_type, "\n")
cat("Unique values in 'Gender':", unique_gender, "\n")
# Summary statistics for numeric columns
summary(data)
# check nulls
any(is.na(data))
# get columns info
str(data)
# Assuming your Date column is character
data$Date <- mdy(data$Date)
str(data$Date)
# Display the first few rows of the data
head(data)
# =========================== Descriptive Statistics=================================================
#
#
# # 4. Customer type
# # Count of customers by type
# customer_type_counts <- table(data$Customer.type)
# cat("Customer type distribution:\n", customer_type_counts, "\n")
#
# # 5. Gender
# # Count of customers by gender
# gender_counts <- table(data$Gender)
# cat("Gender distribution:\n", gender_counts, "\n")
#
# # 6. Product line
# # Count of products in each category
# product_line_counts <- table(data$Product.line)
# cat("Product line distribution:\n", product_line_counts, "\n")
#
#
# # 15. Gross margin percentage
# # Mean and distribution of gross margin percentages
# mean_margin <- mean(data$gross.margin.percentage)
# cat("Mean Gross Margin Percentage:", mean_margin, "\n")
#
# # 17. Rating
# # Mean and distribution of customer ratings
# mean_rating <- mean(data$Rating)
# cat("Mean Customer Rating:", mean_rating, "\n")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
